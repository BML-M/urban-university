def is_prime(func):
    # Внутренняя функция-обертка, которая проверяет результат функции на простоту
    def wrapper(*args, **kwargs):
        result_is_prime = func(*args, **kwargs)  # Вызываем переданную функцию с аргументами
        if result_is_prime > 1:  # Проверяем, что число больше 1
            for i in range(2, result_is_prime):  # Проверяем делители от 2 до числа
                if result_is_prime % i == 0:  # Если находим делитель
                    print("Составное")  # Выводим "Составное"
                    break  # Прерываем цикл
            else:  # Если цикл завершился без прерывания
                print("Простое")  # Выводим "Простое"
        else:  # Если число меньше или равно 1
            print("Составное")  # Выводим "Составное"
        return result_is_prime  # Возвращаем результат функции

    return wrapper  # Возвращаем обернутую функцию


@is_prime  # Применяем декоратор is_prime к функции sum_three
def sum_three(a, b, c):
    return a + b + c  # Функция складывает три числа и возвращает результат


result = sum_three(2, 3, 6)  # Вызываем функцию sum_three
print(result)  # Выводим результат


'''
В данном коде создается декоратор `is_prime`, который проверяет результат функции на простоту. 
Функция `sum_three` складывает три числа и возвращает результат. При вызове `sum_three(2, 3, 6)` 
результат будет равен 11, и так как 11 является простым числом, на экран будет выведено "Простое".
'''
